{"file_contents":{"README.md":{"content":"\n# Helping Hand Together - Charity Crowdfunding Platform\n\nA comprehensive Flask-based crowdfunding platform for charity campaigns with integrated payment gateways (PayPal, Paystack, Coinbase Commerce, Bank Transfer).\n\n## Features\n\n### User Features\n- User registration and authentication\n- Profile management with KYC verification\n- Browse and search campaigns\n- Multiple payment options for donations\n- Read news and comment\n- Create campaigns (after KYC verification)\n- Track personal campaigns and donations\n\n### Admin Features\n- Comprehensive admin dashboard\n- User management\n- KYC verification approval/rejection\n- Campaign moderation (approve/reject)\n- News management\n- Payment method configuration\n- Location management\n- Send appreciation emails to users\n- Donation tracking and management\n\n### Payment Integration\n- **PayPal**: Full integration with order creation and capture\n- **Paystack**: Transaction initialization and verification\n- **Coinbase Commerce**: Cryptocurrency payments via hosted checkout\n- **Bank Transfer**: Manual confirmation by admin\n\n## Installation\n\n### 1. Install Dependencies\n\n```bash\npip install -r requirements.txt\n```\n\n### 2. Configure Environment Variables\n\nCreate a `.env` file in the project root:\n\n```bash\ncp .env.example .env\n```\n\nEdit `.env` with your actual credentials:\n\n```env\nSECRET_KEY=your-secret-key-here\nDATABASE_URL=sqlite:///hht.db  # Or PostgreSQL connection string\n\n# Mail Settings\nMAIL_SERVER=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USE_TLS=True\nMAIL_USERNAME=your-email@gmail.com\nMAIL_PASSWORD=your-app-password\n\n# Payment Gateway Keys\nPAYPAL_CLIENT_ID=your-paypal-client-id\nPAYPAL_SECRET=your-paypal-secret\nPAYPAL_MODE=sandbox  # or 'live' for production\n\nPAYSTACK_SECRET_KEY=sk_test_your-secret-key\nPAYSTACK_PUBLIC_KEY=pk_test_your-public-key\n\nCOINBASE_API_KEY=your-coinbase-api-key\nCOINBASE_WEBHOOK_SECRET=your-webhook-secret\n```\n\n### 3. Initialize Database\n\n```bash\nflask db init\nflask db migrate -m \"Initial migration\"\nflask db upgrade\n```\n\n### 4. Create Admin User\n\nRun Python shell:\n\n```bash\npython\n```\n\nThen execute:\n\n```python\nfrom main import app, db\nfrom models import User\nfrom werkzeug.security import generate_password_hash\n\nwith app.app_context():\n    admin = User(\n        email='admin@example.com',\n        name='Admin User',\n        password_hash=generate_password_hash('admin123'),\n        is_admin=True,\n        email_verified=True\n    )\n    db.session.add(admin)\n    db.session.commit()\n    print(\"Admin user created!\")\n```\n\n### 5. Run the Application\n\n```bash\npython main.py\n```\n\nThe application will be available at `http://0.0.0.0:5000`\n\n## Payment Gateway Setup\n\n### PayPal\n1. Create a PayPal Developer account at https://developer.paypal.com\n2. Create a REST API app to get Client ID and Secret\n3. Use sandbox credentials for testing\n\n### Paystack\n1. Sign up at https://paystack.com\n2. Get your test keys from the dashboard\n3. Set up webhook URL: `https://your-domain.com/webhooks/paystack`\n\n### Coinbase Commerce\n1. Create account at https://commerce.coinbase.com\n2. Get API key from Settings > API Keys\n3. Set up webhook: `https://your-domain.com/webhooks/coinbase`\n\n## Project Structure\n\n```\nhelping-hand-together/\n├── main.py                 # Main application entry point\n├── config.py               # Configuration settings\n├── models.py               # Database models\n├── forms.py                # WTForms definitions\n├── auth.py                 # Authentication blueprint\n├── admin.py                # Admin blueprint\n├── payments.py             # Payment gateway integrations\n├── requirements.txt        # Python dependencies\n├── .env.example            # Environment variables template\n├── templates/              # HTML templates\n│   ├── base.html\n│   ├── index.html\n│   ├── campaign.html\n│   ├── admin/              # Admin templates\n│   └── ...\n└── static/\n    └── uploads/            # User-uploaded files\n        ├── kyc/\n        ├── campaigns/\n        └── news/\n```\n\n## Security Considerations\n\n1. **Never commit `.env` file** - Keep credentials secure\n2. **Use HTTPS in production** - Especially for payment processing\n3. **Enable CSRF protection** - Already configured via Flask-WTF\n4. **Validate file uploads** - File type and size restrictions in place\n5. **Use strong SECRET_KEY** - Generate with `python -c \"import secrets; print(secrets.token_hex(32))\"`\n6. **Verify payment webhooks** - Signature verification implemented\n\n## Production Deployment on Replit\n\n1. Set environment variables in Replit Secrets tool\n2. Configure PostgreSQL database (recommended for production)\n3. Set up custom domain\n4. Enable SSL/HTTPS\n5. Configure email service (SendGrid, Mailgun, etc.)\n\n## Support\n\nFor issues or questions, contact support@helpinghandtogether.org\n\n## License\n\nMIT License - See LICENSE file for details\n","size_bytes":4938},"admin.py":{"content":"\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, current_app\nfrom flask_login import login_required, current_user\nfrom flask_mail import Message\nfrom functools import wraps\nfrom werkzeug.utils import secure_filename\nfrom models import db, User, Campaign, KYC, News, PaymentMethod, Location, Donation\nfrom forms import NewsForm, PaymentMethodForm, LocationForm, AppreciationForm\nimport os\nfrom datetime import datetime\n\nbp = Blueprint('admin', __name__, url_prefix='/admin')\n\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or not current_user.is_admin:\n            flash('Admin access required', 'danger')\n            return redirect(url_for('main.index'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@bp.route('/')\n@login_required\n@admin_required\ndef dashboard():\n    total_users = User.query.count()\n    total_campaigns = Campaign.query.count()\n    pending_kyc = KYC.query.filter_by(status='pending').count()\n    pending_campaigns = Campaign.query.filter_by(published=False).count()\n    total_donations = Donation.query.filter_by(status='completed').count()\n    total_raised = db.session.query(db.func.sum(Donation.amount)).filter_by(status='completed').scalar() or 0\n    \n    recent_donations = Donation.query.order_by(Donation.created_at.desc()).limit(10).all()\n    recent_users = User.query.order_by(User.created_at.desc()).limit(10).all()\n    \n    return render_template('admin/dashboard.html',\n                         total_users=total_users,\n                         total_campaigns=total_campaigns,\n                         pending_kyc=pending_kyc,\n                         pending_campaigns=pending_campaigns,\n                         total_donations=total_donations,\n                         total_raised=total_raised,\n                         recent_donations=recent_donations,\n                         recent_users=recent_users)\n\n@bp.route('/users')\n@login_required\n@admin_required\ndef users():\n    page = request.args.get('page', 1, type=int)\n    users = User.query.order_by(User.created_at.desc()).paginate(page=page, per_page=20, error_out=False)\n    return render_template('admin/users.html', users=users)\n\n@bp.route('/user/<int:id>/toggle-admin', methods=['POST'])\n@login_required\n@admin_required\ndef toggle_admin(id):\n    user = User.query.get_or_404(id)\n    user.is_admin = not user.is_admin\n    db.session.commit()\n    flash(f'User {user.name} admin status updated', 'success')\n    return redirect(url_for('admin.users'))\n\n@bp.route('/kyc-verification')\n@login_required\n@admin_required\ndef kyc_verification():\n    pending = KYC.query.filter_by(status='pending').all()\n    verified = KYC.query.filter_by(status='verified').order_by(KYC.verified_at.desc()).limit(20).all()\n    rejected = KYC.query.filter_by(status='rejected').order_by(KYC.submitted_at.desc()).limit(20).all()\n    \n    return render_template('admin/kyc_verification.html', \n                         pending=pending, \n                         verified=verified,\n                         rejected=rejected)\n\n@bp.route('/kyc/<int:id>/verify', methods=['POST'])\n@login_required\n@admin_required\ndef verify_kyc(id):\n    kyc = KYC.query.get_or_404(id)\n    action = request.form.get('action')\n    \n    if action == 'approve':\n        kyc.status = 'verified'\n        kyc.verified_at = datetime.utcnow()\n        flash(f'KYC for {kyc.user.name} approved', 'success')\n    elif action == 'reject':\n        kyc.status = 'rejected'\n        flash(f'KYC for {kyc.user.name} rejected', 'warning')\n    \n    db.session.commit()\n    return redirect(url_for('admin.kyc_verification'))\n\n@bp.route('/campaigns')\n@login_required\n@admin_required\ndef campaigns():\n    page = request.args.get('page', 1, type=int)\n    status = request.args.get('status', 'all')\n    \n    query = Campaign.query\n    if status == 'pending':\n        query = query.filter_by(published=False)\n    elif status == 'published':\n        query = query.filter_by(published=True)\n    \n    campaigns = query.order_by(Campaign.created_at.desc()).paginate(page=page, per_page=20, error_out=False)\n    return render_template('admin/campaigns.html', campaigns=campaigns, status=status)\n\n@bp.route('/campaign/<int:id>/toggle-publish', methods=['POST'])\n@login_required\n@admin_required\ndef toggle_campaign_publish(id):\n    campaign = Campaign.query.get_or_404(id)\n    campaign.published = not campaign.published\n    db.session.commit()\n    \n    status = 'published' if campaign.published else 'unpublished'\n    flash(f'Campaign \"{campaign.title}\" {status}', 'success')\n    return redirect(url_for('admin.campaigns'))\n\n@bp.route('/campaign/<int:id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_campaign(id):\n    campaign = Campaign.query.get_or_404(id)\n    title = campaign.title\n    db.session.delete(campaign)\n    db.session.commit()\n    flash(f'Campaign \"{title}\" deleted', 'success')\n    return redirect(url_for('admin.campaigns'))\n\n@bp.route('/news', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef news():\n    form = NewsForm()\n    \n    if form.validate_on_submit():\n        news = News(\n            title=form.title.data,\n            content=form.content.data,\n            author_id=current_user.id\n        )\n        \n        if form.image.data:\n            file = form.image.data\n            filename = secure_filename(f\"news_{datetime.utcnow().timestamp()}_{file.filename}\")\n            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], 'news', filename)\n            os.makedirs(os.path.dirname(filepath), exist_ok=True)\n            file.save(filepath)\n            news.image = f'/static/uploads/news/{filename}'\n        \n        db.session.add(news)\n        db.session.commit()\n        flash('News published successfully!', 'success')\n        return redirect(url_for('admin.news'))\n    \n    all_news = News.query.order_by(News.created_at.desc()).all()\n    return render_template('admin/news.html', form=form, news=all_news)\n\n@bp.route('/news/<int:id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_news(id):\n    news = News.query.get_or_404(id)\n    db.session.delete(news)\n    db.session.commit()\n    flash('News deleted', 'success')\n    return redirect(url_for('admin.news'))\n\n@bp.route('/payment-methods', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef payment_methods():\n    form = PaymentMethodForm()\n    \n    if form.validate_on_submit():\n        pm = PaymentMethod(\n            name=form.name.data,\n            type=form.type.data,\n            details=form.details.data\n        )\n        \n        # Store type-specific fields\n        if form.type.data == 'crypto':\n            pm.crypto_wallet_address = form.crypto_wallet_address.data\n            pm.crypto_currency = form.crypto_currency.data\n        elif form.type.data == 'bank':\n            pm.bank_name = form.bank_name.data\n            pm.account_name = form.account_name.data\n            pm.account_number = form.account_number.data\n            pm.routing_number = form.routing_number.data\n            pm.bank_address = form.bank_address.data\n        elif form.type.data == 'paypal':\n            pm.paypal_client_id = form.paypal_client_id.data\n            pm.paypal_secret = form.paypal_secret.data\n            pm.paypal_mode = form.paypal_mode.data\n        elif form.type.data == 'paystack':\n            pm.paystack_public_key = form.paystack_public_key.data\n            pm.paystack_secret_key = form.paystack_secret_key.data\n        \n        db.session.add(pm)\n        db.session.commit()\n        flash('Payment method added successfully!', 'success')\n        return redirect(url_for('admin.payment_methods'))\n    \n    methods = PaymentMethod.query.all()\n    return render_template('admin/payment_methods.html', form=form, methods=methods)\n\n@bp.route('/payment-method/<int:id>/toggle', methods=['POST'])\n@login_required\n@admin_required\ndef toggle_payment_method(id):\n    pm = PaymentMethod.query.get_or_404(id)\n    pm.active = not pm.active\n    db.session.commit()\n    flash('Payment method status updated', 'success')\n    return redirect(url_for('admin.payment_methods'))\n\n@bp.route('/payment-method/<int:id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_payment_method(id):\n    pm = PaymentMethod.query.get_or_404(id)\n    db.session.delete(pm)\n    db.session.commit()\n    flash('Payment method deleted', 'success')\n    return redirect(url_for('admin.payment_methods'))\n\n@bp.route('/locations', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef locations():\n    form = LocationForm()\n    \n    if form.validate_on_submit():\n        location = Location(\n            name=form.name.data,\n            country=form.country.data\n        )\n        db.session.add(location)\n        db.session.commit()\n        flash('Location added', 'success')\n        return redirect(url_for('admin.locations'))\n    \n    all_locations = Location.query.all()\n    return render_template('admin/locations.html', form=form, locations=all_locations)\n\n@bp.route('/location/<int:id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_location(id):\n    location = Location.query.get_or_404(id)\n    db.session.delete(location)\n    db.session.commit()\n    flash('Location deleted', 'success')\n    return redirect(url_for('admin.locations'))\n\n@bp.route('/appreciate/<int:user_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef appreciate_user(user_id):\n    user = User.query.get_or_404(user_id)\n    form = AppreciationForm()\n    \n    if form.validate_on_submit():\n        from flask_mail import Mail\n        mail = Mail(current_app)\n        \n        msg = Message(\n            subject='Appreciation from Helping Hand Together',\n            recipients=[user.email],\n            body=form.message.data\n        )\n        \n        try:\n            mail.send(msg)\n            flash(f'Appreciation email sent to {user.name}', 'success')\n        except Exception as e:\n            flash(f'Failed to send email: {str(e)}', 'danger')\n        \n        return redirect(url_for('admin.users'))\n    \n    return render_template('admin/appreciate.html', user=user, form=form)\n\n@bp.route('/donations')\n@login_required\n@admin_required\ndef donations():\n    page = request.args.get('page', 1, type=int)\n    status = request.args.get('status', 'all')\n    \n    query = Donation.query\n    if status != 'all':\n        query = query.filter_by(status=status)\n    \n    donations = query.order_by(Donation.created_at.desc()).paginate(page=page, per_page=20, error_out=False)\n    return render_template('admin/donations.html', donations=donations, status=status)\n\n@bp.route('/donation/<int:id>/confirm', methods=['POST'])\n@login_required\n@admin_required\ndef confirm_donation(id):\n    donation = Donation.query.get_or_404(id)\n    \n    if donation.status == 'pending' and donation.payment_method == 'bank':\n        donation.status = 'completed'\n        campaign = donation.campaign\n        campaign.raised_amount += donation.amount\n        db.session.commit()\n        flash('Donation confirmed', 'success')\n    else:\n        flash('Cannot confirm this donation', 'warning')\n    \n    return redirect(url_for('admin.donations'))\n","size_bytes":11251},"auth.py":{"content":"\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, current_app\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.utils import secure_filename\nfrom models import db, User, KYC, Campaign\nfrom forms import LoginForm, RegistrationForm, KYCForm, CampaignForm\nimport os\nfrom datetime import datetime\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'pdf'}\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    \n    form = RegistrationForm()\n    if form.validate_on_submit():\n        if User.query.filter_by(email=form.email.data.lower()).first():\n            flash('Email already registered', 'danger')\n            return redirect(url_for('auth.register'))\n        \n        user = User(\n            email=form.email.data.lower(),\n            name=form.name.data,\n            password_hash=generate_password_hash(form.password.data)\n        )\n        db.session.add(user)\n        db.session.commit()\n        \n        flash('Registration successful! Please login.', 'success')\n        return redirect(url_for('auth.login'))\n    \n    return render_template('register.html', form=form)\n\n@bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data.lower()).first()\n        if user and check_password_hash(user.password_hash, form.password.data):\n            login_user(user, remember=form.remember_me.data)\n            next_page = request.args.get('next')\n            flash(f'Welcome back, {user.name}!', 'success')\n            return redirect(next_page) if next_page else redirect(url_for('main.index'))\n        else:\n            flash('Invalid email or password', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@bp.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out', 'info')\n    return redirect(url_for('main.index'))\n\n@bp.route('/profile', methods=['GET', 'POST'])\n@login_required\ndef profile():\n    kyc_form = KYCForm()\n    \n    if kyc_form.validate_on_submit():\n        file = kyc_form.document.data\n        if file and allowed_file(file.filename):\n            filename = secure_filename(f\"{current_user.id}_{datetime.utcnow().timestamp()}_{file.filename}\")\n            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], 'kyc', filename)\n            os.makedirs(os.path.dirname(filepath), exist_ok=True)\n            file.save(filepath)\n            \n            if not current_user.kyc:\n                kyc = KYC(\n                    user_id=current_user.id,\n                    document_path=filepath,\n                    id_type=kyc_form.id_type.data,\n                    status='pending'\n                )\n                db.session.add(kyc)\n            else:\n                current_user.kyc.document_path = filepath\n                current_user.kyc.id_type = kyc_form.id_type.data\n                current_user.kyc.status = 'pending'\n                current_user.kyc.submitted_at = datetime.utcnow()\n            \n            db.session.commit()\n            flash('KYC document submitted successfully! Awaiting verification.', 'success')\n            return redirect(url_for('auth.profile'))\n    \n    campaigns = Campaign.query.filter_by(owner_id=current_user.id).order_by(Campaign.created_at.desc()).all()\n    \n    return render_template('profile.html', kyc_form=kyc_form, campaigns=campaigns)\n\n@bp.route('/create-campaign', methods=['GET', 'POST'])\n@login_required\ndef create_campaign():\n    # Check if user has verified KYC\n    if not current_user.kyc or current_user.kyc.status != 'verified':\n        flash('You must complete KYC verification before creating a campaign', 'warning')\n        return redirect(url_for('auth.profile'))\n    \n    form = CampaignForm()\n    \n    if form.validate_on_submit():\n        campaign = Campaign(\n            title=form.title.data,\n            description=form.description.data,\n            goal_amount=form.goal_amount.data,\n            location=form.location.data,\n            category=form.category.data,\n            end_date=form.end_date.data,\n            owner_id=current_user.id,\n            published=False  # Requires admin approval\n        )\n        \n        if form.image.data:\n            file = form.image.data\n            filename = secure_filename(f\"campaign_{datetime.utcnow().timestamp()}_{file.filename}\")\n            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], 'campaigns', filename)\n            os.makedirs(os.path.dirname(filepath), exist_ok=True)\n            file.save(filepath)\n            campaign.image = f'/static/uploads/campaigns/{filename}'\n        \n        db.session.add(campaign)\n        db.session.commit()\n        \n        flash('Campaign created! Awaiting admin approval.', 'success')\n        return redirect(url_for('auth.profile'))\n    \n    return render_template('create_campaign.html', form=form)\n","size_bytes":5385},"config.py":{"content":"\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Config:\n    SECRET_KEY = os.getenv('SECRET_KEY') or 'dev-secret-key-change-in-production'\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL') or 'sqlite:///hht.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    # Mail\n    MAIL_SERVER = os.getenv('MAIL_SERVER', 'smtp.gmail.com')\n    MAIL_PORT = int(os.getenv('MAIL_PORT') or 587)\n    MAIL_USE_TLS = os.getenv('MAIL_USE_TLS', 'True') == 'True'\n    MAIL_USERNAME = os.getenv('MAIL_USERNAME')\n    MAIL_PASSWORD = os.getenv('MAIL_PASSWORD')\n    MAIL_DEFAULT_SENDER = os.getenv('MAIL_DEFAULT_SENDER') or os.getenv('MAIL_USERNAME')\n    MAIL_USE_SSL = False\n\n    # Payment keys\n    PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')\n    PAYPAL_SECRET_KEY = os.getenv('PAYPAL_SECRET_KEY')\n    PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'live')  # sandbox or live\n    \n    PAYSTACK_SECRET_KEY = os.getenv('PAYSTACK_SECRET_KEY')\n    PAYSTACK_PUBLIC_KEY = os.getenv('PAYSTACK_PUBLIC_KEY')\n    \n    COINBASE_API_KEY = os.getenv('COINBASE_API_KEY')\n    COINBASE_WEBHOOK_SECRET = os.getenv('COINBASE_WEBHOOK_SECRET')\n\n    UPLOAD_FOLDER = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'static', 'uploads')\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16 MB\n","size_bytes":1266},"forms.py":{"content":"\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed, FileRequired\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField, TextAreaField, FloatField, SelectField, DateField\nfrom wtforms.validators import DataRequired, Email, Length, EqualTo, Optional, NumberRange\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember me')\n    submit = SubmitField('Login')\n\nclass RegistrationForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    name = StringField('Full name', validators=[DataRequired(), Length(min=2, max=120)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Register')\n\nclass KYCForm(FlaskForm):\n    id_type = SelectField('ID Type', choices=[('passport', 'Passport'), ('driver_license', 'Driver License'), ('national_id', 'National ID')], validators=[DataRequired()])\n    document = FileField('KYC Document (JPG, PNG, PDF)', validators=[FileRequired(), FileAllowed(['jpg', 'png', 'pdf'], 'Images and PDFs only!')])\n    submit = SubmitField('Submit KYC')\n\nclass CampaignForm(FlaskForm):\n    title = StringField('Campaign Title', validators=[DataRequired(), Length(max=200)])\n    description = TextAreaField('Description', validators=[DataRequired()])\n    goal_amount = FloatField('Goal Amount ($)', validators=[DataRequired(), NumberRange(min=1)])\n    location = StringField('Location', validators=[DataRequired(), Length(max=120)])\n    category = StringField('Category', validators=[Optional(), Length(max=100)])\n    end_date = DateField('End Date', validators=[Optional()], format='%Y-%m-%d')\n    image = FileField('Campaign Image', validators=[FileAllowed(['jpg', 'png', 'jpeg'], 'Images only!')])\n    submit = SubmitField('Create Campaign')\n\nclass DonationForm(FlaskForm):\n    donor_name = StringField('Your Name', validators=[DataRequired(), Length(max=120)])\n    donor_email = StringField('Your Email', validators=[DataRequired(), Email()])\n    amount = FloatField('Donation Amount ($)', validators=[DataRequired(), NumberRange(min=1)])\n    payment_method = SelectField('Payment Method', choices=[], validators=[DataRequired()])\n    anonymous = BooleanField('Make donation anonymous')\n    submit = SubmitField('Proceed to Payment')\n\nclass CommentForm(FlaskForm):\n    content = TextAreaField('Comment', validators=[DataRequired(), Length(min=1, max=500)])\n    submit = SubmitField('Post Comment')\n\nclass NewsForm(FlaskForm):\n    title = StringField('Title', validators=[DataRequired(), Length(max=200)])\n    content = TextAreaField('Content', validators=[DataRequired()])\n    image = FileField('Image', validators=[FileAllowed(['jpg', 'png', 'jpeg'], 'Images only!')])\n    submit = SubmitField('Publish News')\n\nclass PaymentMethodForm(FlaskForm):\n    name = StringField('Name', validators=[DataRequired(), Length(max=80)])\n    type = SelectField('Type', choices=[('paypal', 'PayPal'), ('paystack', 'Paystack'), ('crypto', 'Cryptocurrency'), ('bank', 'Bank Transfer')], validators=[DataRequired()])\n    \n    # Crypto fields\n    crypto_wallet_address = StringField('Crypto Wallet Address', validators=[Optional(), Length(max=200)])\n    crypto_currency = SelectField('Cryptocurrency', choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('USDT', 'Tether'), ('BNB', 'Binance Coin')], validators=[Optional()])\n    \n    # Bank transfer fields\n    bank_name = StringField('Bank Name', validators=[Optional(), Length(max=100)])\n    account_name = StringField('Account Name', validators=[Optional(), Length(max=100)])\n    account_number = StringField('Account Number', validators=[Optional(), Length(max=50)])\n    routing_number = StringField('Routing Number / SWIFT Code', validators=[Optional(), Length(max=50)])\n    bank_address = TextAreaField('Bank Address', validators=[Optional()])\n    \n    # PayPal fields\n    paypal_client_id = StringField('PayPal Client ID', validators=[Optional(), Length(max=200)])\n    paypal_secret = StringField('PayPal Secret Key', validators=[Optional(), Length(max=200)])\n    paypal_mode = SelectField('PayPal Mode', choices=[('sandbox', 'Sandbox'), ('live', 'Live')], validators=[Optional()])\n    \n    # Paystack fields\n    paystack_public_key = StringField('Paystack Public Key', validators=[Optional(), Length(max=200)])\n    paystack_secret_key = StringField('Paystack Secret Key', validators=[Optional(), Length(max=200)])\n    \n    details = TextAreaField('Additional Details/Instructions', validators=[Optional()])\n    submit = SubmitField('Add Payment Method')\n\nclass LocationForm(FlaskForm):\n    name = StringField('Location Name', validators=[DataRequired(), Length(max=120)])\n    country = StringField('Country', validators=[DataRequired(), Length(max=100)])\n    submit = SubmitField('Add Location')\n\nclass AppreciationForm(FlaskForm):\n    message = TextAreaField('Appreciation Message', validators=[DataRequired(), Length(min=10, max=1000)])\n    submit = SubmitField('Send Appreciation')\n","size_bytes":5244},"init_db.py":{"content":"\nfrom main import app, db\nfrom models import User\nfrom werkzeug.security import generate_password_hash\n\ndef init_database():\n    with app.app_context():\n        # Create all tables\n        db.create_all()\n        \n        # Check if admin exists\n        admin = User.query.filter_by(email='ikpedesire5@gmail.com').first()\n        \n        if not admin:\n            # Create new admin user\n            admin = User(\n                email='ikpedesire5@gmail.com',\n                name='Admin User',\n                password_hash=generate_password_hash('didi5566'),\n                is_admin=True,\n                email_verified=True\n            )\n            db.session.add(admin)\n            db.session.commit()\n            print(\"✓ Admin user created successfully!\")\n        else:\n            # Update existing admin credentials\n            admin.name = 'Admin User'\n            admin.password_hash = generate_password_hash('didi5566')\n            admin.is_admin = True\n            admin.email_verified = True\n            db.session.commit()\n            print(\"✓ Admin user credentials updated successfully!\")\n        \n        print(\"\\n=== Admin Login Credentials ===\")\n        print(f\"Email: ikpedesire5@gmail.com\")\n        print(f\"Password: didi5566\")\n        print(\"================================\\n\")\n\nif __name__ == '__main__':\n    init_database()\n","size_bytes":1357},"main.py":{"content":"from flask import Flask, render_template, redirect, url_for, flash, request, jsonify\nfrom flask_login import LoginManager, login_required, current_user\nfrom flask_mail import Mail, Message\nfrom flask_migrate import Migrate\nfrom config import Config\nfrom models import db, User, Campaign, Donation, News, Comment, PaymentMethod, Location\nfrom forms import DonationForm, CommentForm\nimport os\n\napp = Flask(__name__)\napp.config.from_object(Config)\n\n# Initialize extensions\ndb.init_app(app)\nmigrate = Migrate(app, db)\nmail = Mail(app)\n\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'auth.login'\nlogin_manager.login_message = 'Please log in to access this page'\nlogin_manager.login_message_category = 'info'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return db.session.get(User, int(user_id))\n\n# Ensure upload folders exist\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\nos.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'kyc'), exist_ok=True)\nos.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'campaigns'), exist_ok=True)\nos.makedirs(os.path.join(app.config['UPLOAD_FOLDER'], 'news'), exist_ok=True)\n\n# Register blueprints\nfrom auth import bp as auth_bp\napp.register_blueprint(auth_bp)\n\nfrom admin import bp as admin_bp\napp.register_blueprint(admin_bp)\n\n# Create blueprint for main routes\nfrom flask import Blueprint\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\ndef index():\n    campaigns = Campaign.query.filter_by(published=True).order_by(Campaign.created_at.desc()).limit(6).all()\n    news = News.query.order_by(News.created_at.desc()).limit(3).all()\n\n    total_raised = db.session.query(db.func.sum(Campaign.raised_amount)).filter_by(published=True).scalar() or 0\n    total_campaigns = Campaign.query.filter_by(published=True).count()\n    total_donations = Donation.query.filter_by(status='completed').count()\n\n    return render_template('index.html', \n                         campaigns=campaigns, \n                         news=news,\n                         total_raised=total_raised,\n                         total_campaigns=total_campaigns,\n                         total_donations=total_donations)\n\n@main_bp.route('/campaigns')\ndef campaigns():\n    page = request.args.get('page', 1, type=int)\n    category = request.args.get('category')\n    location = request.args.get('location')\n\n    query = Campaign.query.filter_by(published=True)\n\n    if category:\n        query = query.filter_by(category=category)\n    if location:\n        query = query.filter_by(location=location)\n\n    campaigns = query.order_by(Campaign.created_at.desc()).paginate(page=page, per_page=12, error_out=False)\n\n    return render_template('campaigns.html', campaigns=campaigns)\n\n@main_bp.route('/campaign/<int:id>', methods=['GET', 'POST'])\ndef campaign_detail(id):\n    campaign = Campaign.query.get_or_404(id)\n    if not campaign.published and (not current_user.is_authenticated or (current_user.id != campaign.owner_id and not current_user.is_admin)):\n        flash('Campaign not found', 'danger')\n        return redirect(url_for('main.campaigns'))\n\n    form = DonationForm()\n    payment_methods = PaymentMethod.query.filter_by(active=True).all()\n    form.payment_method.choices = [(pm.type, pm.name) for pm in payment_methods]\n\n    recent_donations = Donation.query.filter_by(\n        campaign_id=campaign.id, \n        status='completed'\n    ).order_by(Donation.created_at.desc()).limit(10).all()\n\n    return render_template('campaign.html', \n                         campaign=campaign, \n                         form=form,\n                         recent_donations=recent_donations)\n\n@main_bp.route('/donate/<int:campaign_id>', methods=['POST'])\ndef donate(campaign_id):\n    campaign = Campaign.query.get_or_404(campaign_id)\n    form = DonationForm()\n\n    payment_methods = PaymentMethod.query.filter_by(active=True).all()\n    form.payment_method.choices = [(pm.type, pm.name) for pm in payment_methods]\n\n    if form.validate_on_submit():\n        from payments import get_payment_processor\n\n        donation = Donation(\n            campaign_id=campaign_id,\n            donor_email=form.donor_email.data,\n            donor_name=form.donor_name.data,\n            amount=form.amount.data,\n            payment_method=form.payment_method.data,\n            anonymous=form.anonymous.data,\n            status='pending'\n        )\n        db.session.add(donation)\n        db.session.commit()\n\n        # Process payment based on method\n        payment_method = form.payment_method.data\n\n        if payment_method == 'paypal':\n            processor = get_payment_processor('paypal')\n            result = processor.create_order(\n                amount=form.amount.data,\n                return_url=url_for('main.paypal_success', donation_id=donation.id, _external=True),\n                cancel_url=url_for('main.donation_cancel', donation_id=donation.id, _external=True)\n            )\n            if 'approval_url' in result:\n                donation.transaction_id = result['order_id']\n                db.session.commit()\n                return redirect(result['approval_url'])\n            else:\n                flash('Payment initialization failed', 'danger')\n\n        elif payment_method == 'paystack':\n            processor = get_payment_processor('paystack')\n            result = processor.initialize_transaction(\n                email=form.donor_email.data,\n                amount=form.amount.data,\n                reference=f'DON-{donation.id}',\n                callback_url=url_for('main.paystack_callback', _external=True)\n            )\n            if 'authorization_url' in result:\n                donation.transaction_id = result['reference']\n                db.session.commit()\n                return redirect(result['authorization_url'])\n            else:\n                flash('Payment initialization failed', 'danger')\n\n        elif payment_method == 'crypto':\n            processor = get_payment_processor('crypto')\n            result = processor.create_charge(\n                name=f'Donation to {campaign.title}',\n                description=f'Donation by {form.donor_name.data}',\n                amount=form.amount.data,\n                metadata={'donation_id': donation.id, 'campaign_id': campaign_id}\n            )\n            if 'hosted_url' in result:\n                donation.transaction_id = result['charge_id']\n                db.session.commit()\n                return redirect(result['hosted_url'])\n            else:\n                flash('Payment initialization failed', 'danger')\n\n        elif payment_method == 'bank':\n            # For bank transfer, show instructions\n            flash('Please complete your bank transfer. Admin will verify and confirm your donation.', 'info')\n            return redirect(url_for('main.bank_transfer_instructions', donation_id=donation.id))\n\n    return redirect(url_for('main.campaign_detail', id=campaign_id))\n\n@main_bp.route('/paypal/success')\ndef paypal_success():\n    donation_id = request.args.get('donation_id')\n    token = request.args.get('token')\n\n    if donation_id and token:\n        from payments import PayPalPayment\n        donation = Donation.query.get(donation_id)\n        if donation:\n            processor = PayPalPayment()\n            result = processor.capture_order(token)\n\n            if 'error' not in result and result.get('status') == 'COMPLETED':\n                donation.status = 'completed'\n                campaign = donation.campaign\n                campaign.raised_amount += donation.amount\n                db.session.commit()\n\n                flash('Thank you for your donation!', 'success')\n                return redirect(url_for('main.donation_success'))\n\n    flash('Payment verification failed', 'danger')\n    return redirect(url_for('main.index'))\n\n@main_bp.route('/paystack/callback')\ndef paystack_callback():\n    reference = request.args.get('reference')\n\n    if reference:\n        from payments import PaystackPayment\n        processor = PaystackPayment()\n        result = processor.verify_transaction(reference)\n\n        if result.get('status') == 'success':\n            donation = Donation.query.filter_by(transaction_id=reference).first()\n            if donation and donation.status == 'pending':\n                donation.status = 'completed'\n                campaign = donation.campaign\n                campaign.raised_amount += donation.amount\n                db.session.commit()\n\n                flash('Thank you for your donation!', 'success')\n                return redirect(url_for('main.donation_success'))\n\n    flash('Payment verification failed', 'danger')\n    return redirect(url_for('main.index'))\n\n@main_bp.route('/donation/success')\ndef donation_success():\n    return render_template('donation_success.html')\n\n@main_bp.route('/donation/cancel/<int:donation_id>')\ndef donation_cancel(donation_id):\n    donation = Donation.query.get(donation_id)\n    if donation:\n        donation.status = 'cancelled'\n        db.session.commit()\n    flash('Donation cancelled', 'info')\n    return redirect(url_for('main.index'))\n\n@main_bp.route('/bank-transfer/<int:donation_id>')\ndef bank_transfer_instructions(donation_id):\n    donation = Donation.query.get_or_404(donation_id)\n    bank_method = PaymentMethod.query.filter_by(type='bank', active=True).first()\n    return render_template('bank_transfer.html', donation=donation, bank_method=bank_method)\n\n@main_bp.route('/news')\ndef news_list():\n    page = request.args.get('page', 1, type=int)\n    news = News.query.order_by(News.created_at.desc()).paginate(page=page, per_page=10, error_out=False)\n    return render_template('news_list.html', news=news)\n\n@main_bp.route('/news/<int:id>', methods=['GET', 'POST'])\ndef news_detail(id):\n    news = News.query.get_or_404(id)\n    form = CommentForm()\n\n    if form.validate_on_submit() and current_user.is_authenticated:\n        comment = Comment(\n            news_id=news.id,\n            user_id=current_user.id,\n            content=form.content.data\n        )\n        db.session.add(comment)\n        db.session.commit()\n        flash('Comment posted!', 'success')\n        return redirect(url_for('main.news_detail', id=id))\n\n    comments = Comment.query.filter_by(news_id=news.id).order_by(Comment.created_at.desc()).all()\n\n    return render_template('news_detail.html', news=news, form=form, comments=comments)\n\n@main_bp.route('/about')\ndef about():\n    return render_template('about.html')\n\n@main_bp.route('/contact')\ndef contact():\n    return render_template('contact.html')\n\napp.register_blueprint(main_bp)\n\n# Webhooks\n@app.route('/webhooks/coinbase', methods=['POST'])\ndef coinbase_webhook():\n    from payments import CoinbaseCommercePayment\n\n    signature = request.headers.get('X-CC-Webhook-Signature')\n    body = request.data\n\n    processor = CoinbaseCommercePayment()\n    if processor.verify_webhook(signature, body):\n        event = request.json\n\n        if event['type'] == 'charge:confirmed':\n            charge_id = event['data']['id']\n            metadata = event['data'].get('metadata', {})\n            donation_id = metadata.get('donation_id')\n\n            if donation_id:\n                donation = Donation.query.get(donation_id)\n                if donation and donation.status == 'pending':\n                    donation.status = 'completed'\n                    campaign = donation.campaign\n                    campaign.raised_amount += donation.amount\n                    db.session.commit()\n\n        return jsonify({'status': 'success'}), 200\n\n    return jsonify({'status': 'invalid'}), 400\n\n@app.route('/webhooks/paystack', methods=['POST'])\ndef paystack_webhook():\n    from payments import PaystackPayment\n\n    signature = request.headers.get('X-Paystack-Signature')\n    body = request.data\n\n    processor = PaystackPayment()\n    if processor.verify_webhook(signature, body):\n        event = request.json\n\n        if event['event'] == 'charge.success':\n            reference = event['data']['reference']\n            donation = Donation.query.filter_by(transaction_id=reference).first()\n\n            if donation and donation.status == 'pending':\n                donation.status = 'completed'\n                campaign = donation.campaign\n                campaign.raised_amount += donation.amount\n                db.session.commit()\n\n        return jsonify({'status': 'success'}), 200\n\n    return jsonify({'status': 'invalid'}), 400\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":12512},"migrate_payment_methods.py":{"content":"\nfrom main import app, db\nfrom models import PaymentMethod\n\ndef migrate_payment_methods():\n    with app.app_context():\n        # Add new columns to existing table\n        with db.engine.connect() as conn:\n            try:\n                # Check if columns exist, if not add them\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN crypto_wallet_address VARCHAR(200);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN crypto_currency VARCHAR(20);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN bank_name VARCHAR(100);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN account_name VARCHAR(100);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN account_number VARCHAR(50);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN routing_number VARCHAR(50);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN bank_address TEXT;\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN paypal_client_id VARCHAR(200);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN paypal_secret VARCHAR(200);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN paypal_mode VARCHAR(20);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN paystack_public_key VARCHAR(200);\n                \"\"\"))\n            except:\n                pass\n            \n            try:\n                conn.execute(db.text(\"\"\"\n                    ALTER TABLE payment_method ADD COLUMN paystack_secret_key VARCHAR(200);\n                \"\"\"))\n            except:\n                pass\n            \n            conn.commit()\n        \n        print(\"✓ Payment method columns added successfully!\")\n\nif __name__ == '__main__':\n    migrate_payment_methods()\n","size_bytes":3067},"models.py":{"content":"from datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\n\ndb = SQLAlchemy()\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    name = db.Column(db.String(120))\n    is_admin = db.Column(db.Boolean, default=False)\n    profile_image = db.Column(db.String(256))\n    email_verified = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    kyc = db.relationship('KYC', backref='user', uselist=False, cascade='all, delete-orphan')\n    campaigns = db.relationship('Campaign', backref='owner', lazy='dynamic', cascade='all, delete-orphan')\n    comments = db.relationship('Comment', backref='author', lazy='dynamic', cascade='all, delete-orphan')\n    news_posts = db.relationship('News', backref='author', lazy='dynamic')\n\n    def __repr__(self):\n        return f'<User {self.email}>'\n\nclass KYC(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    document_path = db.Column(db.String(256))\n    id_type = db.Column(db.String(50))  # passport, driver_license, national_id\n    status = db.Column(db.String(32), default='pending')  # pending/verified/rejected\n    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)\n    verified_at = db.Column(db.DateTime)\n\nclass Campaign(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    owner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    goal_amount = db.Column(db.Float, nullable=False)\n    raised_amount = db.Column(db.Float, default=0.0)\n    image_path = db.Column(db.String(256))\n    category = db.Column(db.String(100))\n    location = db.Column(db.String(120))\n    published = db.Column(db.Boolean, default=False)\n    end_date = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    donations = db.relationship('Donation', backref='campaign', lazy='dynamic', cascade='all, delete-orphan')\n\n    def progress_percentage(self):\n        if self.goal_amount > 0:\n            return min(int((self.raised_amount / self.goal_amount) * 100), 100)\n        return 0\n\nclass Donation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    donor_name = db.Column(db.String(120))\n    donor_email = db.Column(db.String(120))\n    amount = db.Column(db.Float, nullable=False)\n    payment_method = db.Column(db.String(50))\n    transaction_id = db.Column(db.String(256))\n    status = db.Column(db.String(32), default='pending')\n    anonymous = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass PaymentMethod(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    type = db.Column(db.String(50), nullable=False)  # paypal, paystack, crypto, bank\n    details = db.Column(db.Text)\n    \n    # Crypto fields\n    crypto_wallet_address = db.Column(db.String(200))\n    crypto_currency = db.Column(db.String(20))\n    \n    # Bank transfer fields\n    bank_name = db.Column(db.String(100))\n    account_name = db.Column(db.String(100))\n    account_number = db.Column(db.String(50))\n    routing_number = db.Column(db.String(50))\n    bank_address = db.Column(db.Text)\n    \n    # PayPal fields\n    paypal_client_id = db.Column(db.String(200))\n    paypal_secret = db.Column(db.String(200))\n    paypal_mode = db.Column(db.String(20))\n    \n    # Paystack fields\n    paystack_public_key = db.Column(db.String(200))\n    paystack_secret_key = db.Column(db.String(200))\n    \n    active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Location(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False, unique=True)\n    country = db.Column(db.String(100))\n    active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass News(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    image_path = db.Column(db.String(256))\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    comments = db.relationship('Comment', backref='news', lazy='dynamic', cascade='all, delete-orphan')\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    news_id = db.Column(db.Integer, db.ForeignKey('news.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)","size_bytes":5134},"payments.py":{"content":"\nimport os\nimport requests\nimport hmac\nimport hashlib\nfrom flask import current_app\n\nclass PayPalPayment:\n    def __init__(self, payment_method=None):\n        if payment_method:\n            self.client_id = payment_method.paypal_client_id\n            self.secret = payment_method.paypal_secret\n            self.mode = payment_method.paypal_mode or 'sandbox'\n        else:\n            self.client_id = os.getenv('PAYPAL_CLIENT_ID')\n            self.secret = os.getenv('PAYPAL_SECRET_KEY')\n            self.mode = os.getenv('PAYPAL_MODE', 'live')\n        self.base_url = 'https://api-m.sandbox.paypal.com' if self.mode == 'sandbox' else 'https://api-m.paypal.com'\n    \n    def get_access_token(self):\n        url = f'{self.base_url}/v1/oauth2/token'\n        headers = {'Accept': 'application/json', 'Accept-Language': 'en_US'}\n        data = {'grant_type': 'client_credentials'}\n        \n        response = requests.post(url, headers=headers, data=data, auth=(self.client_id, self.secret))\n        \n        if response.status_code == 200:\n            return response.json().get('access_token')\n        return None\n    \n    def create_order(self, amount, return_url, cancel_url):\n        access_token = self.get_access_token()\n        if not access_token:\n            return {'error': 'Failed to get access token'}\n        \n        url = f'{self.base_url}/v2/checkout/orders'\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {access_token}'\n        }\n        \n        data = {\n            'intent': 'CAPTURE',\n            'purchase_units': [{\n                'amount': {\n                    'currency_code': 'USD',\n                    'value': str(amount)\n                }\n            }],\n            'application_context': {\n                'return_url': return_url,\n                'cancel_url': cancel_url\n            }\n        }\n        \n        response = requests.post(url, json=data, headers=headers)\n        \n        if response.status_code == 201:\n            order = response.json()\n            approval_url = next((link['href'] for link in order['links'] if link['rel'] == 'approve'), None)\n            return {\n                'order_id': order['id'],\n                'approval_url': approval_url\n            }\n        \n        return {'error': 'Failed to create order'}\n    \n    def capture_order(self, order_id):\n        access_token = self.get_access_token()\n        if not access_token:\n            return {'error': 'Failed to get access token'}\n        \n        url = f'{self.base_url}/v2/checkout/orders/{order_id}/capture'\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {access_token}'\n        }\n        \n        response = requests.post(url, headers=headers)\n        \n        if response.status_code == 201:\n            return response.json()\n        \n        return {'error': 'Failed to capture order'}\n\n\nclass PaystackPayment:\n    def __init__(self, payment_method=None):\n        if payment_method:\n            self.secret_key = payment_method.paystack_secret_key\n        else:\n            self.secret_key = os.getenv('PAYSTACK_SECRET_KEY')\n        self.base_url = 'https://api.paystack.co'\n    \n    def initialize_transaction(self, email, amount, reference, callback_url):\n        url = f'{self.base_url}/transaction/initialize'\n        headers = {\n            'Authorization': f'Bearer {self.secret_key}',\n            'Content-Type': 'application/json'\n        }\n        \n        data = {\n            'email': email,\n            'amount': int(amount * 100),  # Paystack uses kobo/cents\n            'reference': reference,\n            'callback_url': callback_url\n        }\n        \n        response = requests.post(url, json=data, headers=headers)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result['status']:\n                return {\n                    'authorization_url': result['data']['authorization_url'],\n                    'access_code': result['data']['access_code'],\n                    'reference': result['data']['reference']\n                }\n        \n        return {'error': 'Failed to initialize transaction'}\n    \n    def verify_transaction(self, reference):\n        url = f'{self.base_url}/transaction/verify/{reference}'\n        headers = {\n            'Authorization': f'Bearer {self.secret_key}'\n        }\n        \n        response = requests.get(url, headers=headers)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result['status'] and result['data']['status'] == 'success':\n                return {'status': 'success', 'data': result['data']}\n        \n        return {'status': 'failed'}\n    \n    def verify_webhook(self, signature, body):\n        computed_signature = hmac.new(\n            self.secret_key.encode('utf-8'),\n            body,\n            hashlib.sha512\n        ).hexdigest()\n        \n        return signature == computed_signature\n\n\nclass CoinbaseCommercePayment:\n    def __init__(self):\n        self.api_key = os.getenv('COINBASE_API_KEY')\n        self.webhook_secret = os.getenv('COINBASE_WEBHOOK_SECRET')\n        self.base_url = 'https://api.commerce.coinbase.com'\n    \n    def create_charge(self, name, description, amount, metadata=None):\n        url = f'{self.base_url}/charges'\n        headers = {\n            'Content-Type': 'application/json',\n            'X-CC-Api-Key': self.api_key,\n            'X-CC-Version': '2018-03-22'\n        }\n        \n        data = {\n            'name': name,\n            'description': description,\n            'pricing_type': 'fixed_price',\n            'local_price': {\n                'amount': str(amount),\n                'currency': 'USD'\n            },\n            'metadata': metadata or {}\n        }\n        \n        response = requests.post(url, json=data, headers=headers)\n        \n        if response.status_code == 201:\n            result = response.json()\n            return {\n                'charge_id': result['data']['id'],\n                'hosted_url': result['data']['hosted_url'],\n                'code': result['data']['code']\n            }\n        \n        return {'error': 'Failed to create charge'}\n    \n    def verify_webhook(self, signature, body):\n        computed_signature = hmac.new(\n            self.webhook_secret.encode('utf-8'),\n            body,\n            hashlib.sha256\n        ).hexdigest()\n        \n        return signature == computed_signature\n\n\ndef get_payment_processor(payment_type):\n    processors = {\n        'paypal': PayPalPayment,\n        'paystack': PaystackPayment,\n        'crypto': CoinbaseCommercePayment\n    }\n    \n    processor_class = processors.get(payment_type)\n    if processor_class:\n        return processor_class()\n    \n    return None\n","size_bytes":6829},"pyproject.toml":{"content":"\n[tool.poetry]\nname = \"helping-hand-together\"\nversion = \"1.0.0\"\ndescription = \"Charity Crowdfunding Platform\"\nauthors = [\"Your Name <you@example.com>\"]\n\n[tool.poetry.dependencies]\npython = \">=3.11.0,<3.12\"\nFlask = \"^3.0.0\"\nFlask-SQLAlchemy = \"^3.1.1\"\nFlask-Migrate = \"^4.0.5\"\nFlask-Login = \"^0.6.3\"\nFlask-WTF = \"^1.2.1\"\nFlask-Mail = \"^0.9.1\"\nemail-validator = \"^2.1.0\"\npython-dotenv = \"^1.0.0\"\nWerkzeug = \"^3.0.1\"\nPillow = \"^10.1.0\"\nrequests = \"^2.31.0\"\npsycopg2-binary = \"^2.9.9\"\ngunicorn = \"^21.2.0\"\nWTForms = \"^3.1.1\"\n\n[tool.pyright]\nuseLibraryCodeForTypes = true\nexclude = [\".cache\"]\n\n[tool.ruff]\nselect = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']\nignore = ['W291', 'W292', 'W293']\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n","size_bytes":782},"replit.md":{"content":"# Helping Hand Together - Charity Crowdfunding Platform\n\n## Overview\n\nHelping Hand Together is a Flask-based charity crowdfunding platform that enables users to create and support charitable campaigns. The platform features comprehensive user management, KYC verification, multiple payment gateway integrations (PayPal, Paystack, Coinbase Commerce, and Bank Transfer), and an admin dashboard for moderation and management.\n\nThe application follows a traditional Flask MVC architecture with Blueprint-based routing, SQLAlchemy ORM for database operations, and Jinja2 templating for server-side rendering.\n\n## Recent Changes (October 2025)\n\n### Payment System Improvements\n- **Bank Transfer Template**: Created `bank_transfer.html` with complete bank transfer instructions and donation tracking\n- **Payment UI Enhancement**: Improved donation form with icon-enhanced input fields and real-time payment method help text\n- **PayPal Configuration**: Configured for live/production mode with proper API integration\n- **Paystack Integration**: Verified API configuration for live transactions\n- **Payment Form UX**: Added Bootstrap icons and contextual help for each payment method\n\n### Email System Configuration\n- **Gmail SMTP Setup**: Configured for Gmail App Password authentication\n- **Mail Server**: Default SMTP server set to smtp.gmail.com with TLS support\n- **Email Testing**: Admin appreciation email system ready for use\n\n### Bug Fixes\n- Fixed missing `bank_transfer.html` template causing 500 errors\n- Fixed variable naming consistency in bank transfer route\n- Improved error handling in payment processors\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Application Structure\n- **Blueprint-based Architecture**: The application is organized into modular blueprints (`auth`, `admin`, `main`) for separation of concerns and maintainable routing\n- **MVC Pattern**: Models defined in `models.py`, views handled through Flask routes, and Jinja2 templates for presentation\n- **Configuration Management**: Environment-based configuration using `python-dotenv` with fallback defaults for development\n\n### Data Layer\n- **ORM**: SQLAlchemy for database abstraction with Flask-SQLAlchemy integration\n- **Database**: Currently configured for SQLite (development) with support for PostgreSQL via `DATABASE_URL` environment variable\n- **Migration Management**: Flask-Migrate (Alembic) for database schema versioning\n- **Core Models**:\n  - `User`: Authentication, profile, admin flags, email verification\n  - `Campaign`: Fundraising campaigns with goal tracking, publishing workflow\n  - `Donation`: Transaction records with multiple payment method support\n  - `KYC`: User verification documents with approval workflow\n  - `News`: Content management with author attribution\n  - `Comment`: User engagement on news articles\n  - `PaymentMethod`: Configurable payment gateway credentials\n  - `Location`: Geographic categorization\n\n### Authentication & Authorization\n- **User Authentication**: Flask-Login for session management with remember-me functionality\n- **Password Security**: Werkzeug password hashing for secure credential storage\n- **Access Control**: Decorator-based admin authorization (`@admin_required`)\n- **KYC Verification**: Three-state verification workflow (pending/verified/rejected) required for campaign creation\n\n### Payment Integration\n- **Multi-Gateway Support**: Abstracted payment processing supporting:\n  - PayPal (REST API with OAuth token management)\n  - Paystack (transaction initialization and verification)\n  - Coinbase Commerce (cryptocurrency hosted checkout)\n  - Bank Transfer (manual admin confirmation workflow)\n- **Payment Flow**: Form submission → gateway-specific processing → status tracking → admin confirmation (for bank transfers)\n- **Transaction States**: Pending, completed, failed with campaign balance updates\n\n### File Upload System\n- **Storage**: Local filesystem under `static/uploads/` with subdirectories for different asset types (kyc, campaigns, news)\n- **Validation**: File type restrictions (images: jpg/png/jpeg, documents: pdf) with size limits (16MB)\n- **Security**: Werkzeug's `secure_filename()` for sanitization\n\n### Email System\n- **Provider**: Flask-Mail with SMTP configuration (Gmail-ready)\n- **Use Cases**: \n  - Admin appreciation messages to users\n  - Future: donation confirmations, campaign updates\n- **Configuration**: TLS-enabled SMTP with app password support\n\n### Admin Dashboard\n- **Analytics**: Aggregated metrics (total users, campaigns, donations, raised amounts)\n- **User Management**: Admin role toggling, appreciation messaging, user listing\n- **Content Moderation**: \n  - KYC document review and approval/rejection\n  - Campaign publishing workflow\n  - News article management\n- **Payment Administration**: \n  - Gateway credential configuration\n  - Bank transfer confirmation\n  - Donation tracking by status\n- **Location Management**: Geographic tags for campaign categorization\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 with template inheritance (`base.html`)\n- **CSS Framework**: Bootstrap 5.3.2 for responsive UI\n- **Icons**: Bootstrap Icons 1.11.1\n- **Client-side Logic**: Minimal JavaScript, primarily for Bootstrap components\n- **Styling**: Custom CSS variables for brand colors, card hover effects, gradient hero sections\n\n### Security Considerations\n- **CSRF Protection**: Flask-WTF forms with CSRF tokens\n- **File Upload Validation**: Extension and MIME type checking\n- **SQL Injection Prevention**: SQLAlchemy ORM parameterized queries\n- **Session Security**: Flask's secure session cookies with configurable SECRET_KEY\n- **Password Requirements**: Minimum 6 characters enforced at form validation\n\n## External Dependencies\n\n### Core Framework\n- **Flask 3.0.0**: Web application framework\n- **Flask-SQLAlchemy 3.1.1**: ORM integration\n- **Flask-Migrate 4.0.5**: Database migration management\n- **Flask-Login 0.6.3**: User session management\n- **Flask-WTF 1.2.1**: Form handling and CSRF protection\n- **Flask-Mail 0.9.1**: Email functionality\n\n### Payment Gateways\n- **PayPal**: REST API integration (credentials via environment variables)\n- **Paystack**: HTTP API (public/secret key authentication)\n- **Coinbase Commerce**: Hosted checkout API (API key authentication)\n- **Bank Transfer**: Manual processing (no external API)\n\n### Email Service\n- **SMTP Provider**: Configurable (Gmail default)\n- **Authentication**: App-specific passwords or OAuth2 (recommended for Gmail)\n\n### Development Tools\n- **python-dotenv 1.0.0**: Environment variable management\n- **Werkzeug 3.0.1**: WSGI utilities, security helpers\n- **WTForms 3.1.1**: Form validation library\n- **email-validator 2.1.0**: Email format validation\n\n### Production Dependencies\n- **psycopg2-binary 2.9.9**: PostgreSQL adapter (for production database)\n- **gunicorn 21.2.0**: WSGI HTTP server for production deployment\n- **Pillow 10.1.0**: Image processing for uploads\n- **requests 2.31.0**: HTTP library for payment gateway communication\n\n### Database\n- **Development**: SQLite (file-based, `hht.db`)\n- **Production**: PostgreSQL (via `DATABASE_URL` environment variable)\n- **Note**: Application uses SQLAlchemy ORM which abstracts database differences, but PostgreSQL is recommended for production due to concurrent access handling and JSON field support\n\n### Required Environment Variables\n- `SECRET_KEY`: Flask session encryption\n- `DATABASE_URL`: PostgreSQL connection string (optional, defaults to SQLite)\n- `MAIL_SERVER`, `MAIL_PORT`, `MAIL_USERNAME`, `MAIL_PASSWORD`: SMTP configuration\n- `PAYPAL_CLIENT_ID`, `PAYPAL_SECRET`, `PAYPAL_MODE`: PayPal integration\n- `PAYSTACK_PUBLIC_KEY`, `PAYSTACK_SECRET_KEY`: Paystack integration\n- `COINBASE_API_KEY`, `COINBASE_WEBHOOK_SECRET`: Coinbase Commerce integration","size_bytes":7835},"attached_assets/content-1759764375525.md":{"content":"[Skip to main content](https://support.google.com/accounts/troubleshooter/2402620?visit_id=638953611815077581-345006699&p=BadCredentials&rd=2#search-form)\n\n# Can't sign in to your Google Account\n\nIf you can't sign in to your Google Account in Gmail, Google Drive, Google Play, or elsewhere, select the issue that most closely applies to you. Follow the instructions for help getting back in to your account.\n\n**Select the issue:**You forgot your password.You forgot your username or the email address you use to sign in.You know your username and password, but you can't sign in.You think someone else is using your account.You're having trouble with 2-Step Verification.You can't reset your password with a code by text.You use a Google Account through your work, school, or other group.You can't sign in to a Google Account for a kid under 13.You can't sign in from a third-party service\n\n**Why can't you sign in?**You get an error message.The page is refreshing.You're asked for a verification code.You can't sign in to a device or app.\n\n**Did you set up 2-Step Verification?**YesNo\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Why can't you sign in?**You can't use multiple accounts at the same time.You get an error message that your username and password don't match.You're automatically signed in to an account you don't want to use.The page keeps redirecting.You don't know your username.\n\n**Which account do you want to sign in to?**Your account through your work, school, or other groupYour conflicting Google Account\n\n**Are you trying to sign in at www.gmail.com or mail.google.com?**YesNo\n\n## Need more help?\n\n### Try these next steps:\n\n[Post to the help community  Get answers from community members](https://support.google.com/accounts/community?hl=en)\n\ntrue\n\n7602245970592373418\n\ntrue\n\nSearch Help Center\n\nfalse\n\ntrue\n\ntrue\n\ntrue\n\n[Google Help](https://support.google.com/)\n\n[Help Center](https://support.google.com/accounts/?hl=en) [Community](https://support.google.com/accounts/community?hl=en) [Google Account](https://myaccount.google.com/)\n\n[Privacy Policy](https://www.google.com/intl/en/privacy.html) [Terms of Service](https://www.google.com/accounts/TOS)Submit feedback\n\ntrue\n\ntrue\n\n70975\n\nSend feedback on...\n\nThis help content & informationGeneral Help Center experience\n\nfalse\n\nfalse\n\nSearch\n\nClear search\n\nClose search\n\nMain menu\n\nGoogle apps","size_bytes":3039},"attached_assets/content-1759765090409.md":{"content":"[Skip to main content](https://support.google.com/accounts/troubleshooter/2402620?visit_id=638953618915112550-3475540386&p=BadCredentials&rd=2#search-form)\n\n# Can't sign in to your Google Account\n\nIf you can't sign in to your Google Account in Gmail, Google Drive, Google Play, or elsewhere, select the issue that most closely applies to you. Follow the instructions for help getting back in to your account.\n\n**Select the issue:**You forgot your password.You forgot your username or the email address you use to sign in.You know your username and password, but you can't sign in.You think someone else is using your account.You're having trouble with 2-Step Verification.You can't reset your password with a code by text.You use a Google Account through your work, school, or other group.You can't sign in to a Google Account for a kid under 13.You can't sign in from a third-party service\n\n**Why can't you sign in?**You get an error message.The page is refreshing.You're asked for a verification code.You can't sign in to a device or app.\n\n**Did you set up 2-Step Verification?**YesNo\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Why can't you sign in?**You can't use multiple accounts at the same time.You get an error message that your username and password don't match.You're automatically signed in to an account you don't want to use.The page keeps redirecting.You don't know your username.\n\n**Which account do you want to sign in to?**Your account through your work, school, or other groupYour conflicting Google Account\n\n**Are you trying to sign in at www.gmail.com or mail.google.com?**YesNo\n\n## Need more help?\n\n### Try these next steps:\n\n[Post to the help community  Get answers from community members](https://support.google.com/accounts/community?hl=en)\n\ntrue\n\n8353326830960234348\n\ntrue\n\nSearch Help Center\n\nfalse\n\ntrue\n\ntrue\n\ntrue\n\n[Google Help](https://support.google.com/)\n\n[Help Center](https://support.google.com/accounts/?hl=en) [Community](https://support.google.com/accounts/community?hl=en) [Google Account](https://myaccount.google.com/)\n\n[Privacy Policy](https://www.google.com/intl/en/privacy.html) [Terms of Service](https://www.google.com/accounts/TOS)Submit feedback\n\ntrue\n\ntrue\n\n70975\n\nSend feedback on...\n\nThis help content & informationGeneral Help Center experience\n\nfalse\n\nfalse\n\nSearch\n\nClear search\n\nClose search\n\nMain menu\n\nGoogle apps","size_bytes":3040},"attached_assets/content-1759767574314.md":{"content":"[Skip to main content](https://support.google.com/accounts/troubleshooter/2402620?visit_id=638953643756644337-3866288084&p=BadCredentials&rd=2#search-form)\n\n# Can't sign in to your Google Account\n\nIf you can't sign in to your Google Account in Gmail, Google Drive, Google Play, or elsewhere, select the issue that most closely applies to you. Follow the instructions for help getting back in to your account.\n\n**Select the issue:**You forgot your password.You forgot your username or the email address you use to sign in.You know your username and password, but you can't sign in.You think someone else is using your account.You're having trouble with 2-Step Verification.You can't reset your password with a code by text.You use a Google Account through your work, school, or other group.You can't sign in to a Google Account for a kid under 13.You can't sign in from a third-party service\n\n**Why can't you sign in?**You get an error message.The page is refreshing.You're asked for a verification code.You can't sign in to a device or app.\n\n**Did you set up 2-Step Verification?**YesNo\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Why can't you sign in?**You can't use multiple accounts at the same time.You get an error message that your username and password don't match.You're automatically signed in to an account you don't want to use.The page keeps redirecting.You don't know your username.\n\n**Which account do you want to sign in to?**Your account through your work, school, or other groupYour conflicting Google Account\n\n**Are you trying to sign in at www.gmail.com or mail.google.com?**YesNo\n\n## Need more help?\n\n### Try these next steps:\n\n[Post to the help community  Get answers from community members](https://support.google.com/accounts/community?hl=en)\n\ntrue\n\n10322013199008205276\n\ntrue\n\nSearch Help Center\n\nfalse\n\ntrue\n\ntrue\n\ntrue\n\n[Google Help](https://support.google.com/)\n\n[Help Center](https://support.google.com/accounts/?hl=en) [Community](https://support.google.com/accounts/community?hl=en) [Google Account](https://myaccount.google.com/)\n\n[Privacy Policy](https://www.google.com/intl/en/privacy.html) [Terms of Service](https://www.google.com/accounts/TOS)Submit feedback\n\ntrue\n\ntrue\n\n70975\n\nSend feedback on...\n\nThis help content & informationGeneral Help Center experience\n\nfalse\n\nfalse\n\nSearch\n\nClear search\n\nClose search\n\nMain menu\n\nGoogle apps","size_bytes":3041},"attached_assets/content-1759768545063.md":{"content":"[Skip to main content](https://support.google.com/accounts/troubleshooter/2402620?visit_id=638953653463502688-376376052&p=BadCredentials&rd=2#search-form)\n\n# Can't sign in to your Google Account\n\nIf you can't sign in to your Google Account in Gmail, Google Drive, Google Play, or elsewhere, select the issue that most closely applies to you. Follow the instructions for help getting back in to your account.\n\n**Select the issue:**You forgot your password.You forgot your username or the email address you use to sign in.You know your username and password, but you can't sign in.You think someone else is using your account.You're having trouble with 2-Step Verification.You can't reset your password with a code by text.You use a Google Account through your work, school, or other group.You can't sign in to a Google Account for a kid under 13.You can't sign in from a third-party service\n\n**Why can't you sign in?**You get an error message.The page is refreshing.You're asked for a verification code.You can't sign in to a device or app.\n\n**Did you set up 2-Step Verification?**YesNo\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Select the issue:**You can't sign in to your device or an application, like Outlook.App passwords aren't working.You aren't getting codes by text or phone call.Codes from texts or phone calls aren't working.Codes from Google Authenticator aren't working.Your phone is lost or you can't use it.You're having a different issue.Your security key is lost.\n\n**Why can't you sign in?**You can't use multiple accounts at the same time.You get an error message that your username and password don't match.You're automatically signed in to an account you don't want to use.The page keeps redirecting.You don't know your username.\n\n**Which account do you want to sign in to?**Your account through your work, school, or other groupYour conflicting Google Account\n\n**Are you trying to sign in at www.gmail.com or mail.google.com?**YesNo\n\n## Need more help?\n\n### Try these next steps:\n\n[Post to the help community  Get answers from community members](https://support.google.com/accounts/community?hl=en)\n\ntrue\n\n11108308067923182229\n\ntrue\n\nSearch Help Center\n\nfalse\n\ntrue\n\ntrue\n\ntrue\n\n[Google Help](https://support.google.com/)\n\n[Help Center](https://support.google.com/accounts/?hl=en) [Community](https://support.google.com/accounts/community?hl=en) [Google Account](https://myaccount.google.com/)\n\n[Privacy Policy](https://www.google.com/intl/en/privacy.html) [Terms of Service](https://www.google.com/accounts/TOS)Submit feedback\n\ntrue\n\ntrue\n\n70975\n\nSend feedback on...\n\nThis help content & informationGeneral Help Center experience\n\nfalse\n\nfalse\n\nSearch\n\nClear search\n\nClose search\n\nMain menu\n\nGoogle apps","size_bytes":3040}},"version":1}